{
  "data": [
    {
      "id": "all_equal",
      "type": "snippetListing",
      "title": "all_equal",
      "attributes": {
        "text": "Checks if all the elements in an array are equal.\n\nUse `Set(arr)` to create a new set of unique values. \nCompare the `length()` of the set to `1` to check if all the values are equal.\n\n",
        "tags": [
          "array",
          "beginner"
        ]
      },
      "meta": {
        "hash": "35651d1c36d9b1ce6287e092abedfc3eaa9da0877ea29bed867dc1793fcf061f"
      }
    },
    {
      "id": "average",
      "type": "snippetListing",
      "title": "average",
      "attributes": {
        "text": "Returns the average of two or more numbers.\n\nUse `sum()` to sum all of the `args` provided, divide by `length(args)`.\n\n",
        "tags": [
          "math",
          "array",
          "beginner"
        ]
      },
      "meta": {
        "hash": "8b7983ce333c6caf922c92ca65350fca16cb58e865066ce3215f1c8b71eb076d"
      }
    },
    {
      "id": "bifurcate",
      "type": "snippetListing",
      "title": "bifurcate",
      "attributes": {
        "text": "Splits values into two groups. \nIf an element in `filter` is `true`, the corresponding element in the collection belongs to the first group; otherwise, it belongs to the second group.\n\nUse `findall()` with `filter` to get array indices that correspond to `true`.\nUse those indices in a list comprehension to build the first group. \nSimilarly, use `findall()` to get array indices that correspond to `false` and build the second group.\n\n",
        "tags": [
          "array",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "86d08d82db6ab0ccaeb99a685eeef2439a081cb53a7c1bf7a474c39dec400b4a"
      }
    },
    {
      "id": "bifurcate_by",
      "type": "snippetListing",
      "title": "bifurcate_by",
      "attributes": {
        "text": "Splits values into two groups according to a function, which specifies which group an element in the input list belongs to. \nIf the function returns `true`, the element belongs to the first group; otherwise, it belongs to the second group.\n\nUse list comprehension to build both the `true` returning groups and the `false` returning groups.\n\n",
        "tags": [
          "array",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "da8b72f01981f9e7ad91b80c647256cbbb5ff8a24220a19e4a6d4ee5b436e66d"
      }
    },
    {
      "id": "camelize",
      "type": "snippetListing",
      "title": "camelize",
      "attributes": {
        "text": "Converts a string into camelcase. \n\nUse `replace()` with a regular expression to remove the `'` and `` ` `` characters from the string.\nUse `split()` with a regular expression to convert the given string to an array of words.\nUse `map()` and `uppercasefirst()` to capitalize the first letter of each word.\nFinally, use `join()` to combine the words and `lowercasefirst()` to convert the first letter of the string to lowercase.\n\n",
        "tags": [
          "string",
          "regexp",
          "advanced"
        ]
      },
      "meta": {
        "hash": "8f2535235624467fc167952902196af993223147d4a7d2abb6f29482ad729a26"
      }
    },
    {
      "id": "capitalize",
      "type": "snippetListing",
      "title": "capitalize",
      "attributes": {
        "text": "Capitalizes the first letter of a string.\n\nUse `uppercasefirst()` to capitalize the first letter, combine with `lowercase()` if `lower_rest` is `true` to convert the rest to lowercase.\nOmit the second argument, `lower_rest`, to use a default value of `false`.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "b665b394e26bc89d2b4d85730e4be6304c4a00b8c14581de1a3497d80f1e0b84"
      }
    },
    {
      "id": "capitalize_every_word",
      "type": "snippetListing",
      "title": "capitalize_every_word",
      "attributes": {
        "text": "Capitalizes the first letter of every word in a string.\n\nUse `titlecase()` to capitalizethe  first letter of each word in the string.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "a221de54f2e7104994c3d3b5df1df5abf700e0c0bdc57b6003ac547120d4ee7d"
      }
    },
    {
      "id": "chunk",
      "type": "snippetListing",
      "title": "chunk",
      "attributes": {
        "text": "Chunks an array into smaller arrays of the specified size.\n\nUse array comprehension, `min()` and `length()` to create an array of arrays of length `n` from the given array, `arr`.\n\n",
        "tags": [
          "array",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "6cac8d7ed94576fdbfda2cc14633fa18dab058ca8268fe4843901c351dab57f1"
      }
    },
    {
      "id": "digitize",
      "type": "snippetListing",
      "title": "digitize",
      "attributes": {
        "text": "Converts a number to an array of digits.\n\nUse `string(n)` to convert the number to a string, `split()` to convert to a character array.\nUse `parse.()` to convert each element in the array to an `Int32`.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "3c21f01f776d7e7d98cb327bc0bfac4d2aaae1969e52deef565dc009c23f9d66"
      }
    },
    {
      "id": "fibonacci",
      "type": "snippetListing",
      "title": "fibonacci",
      "attributes": {
        "text": "Generates an array, containing the Fibonacci sequence, up until the nth term.\n\nCreate an empty array, initializing the first two values (`0` and `1`).\nLoop until the `length()` of the sequence is equal to `n`, using `append!` to add the sum of the last two values to the sequence.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "1ddb770418522ea64efc722a2fd244d3e525f68800ea44dc1010fbe54b748d99"
      }
    },
    {
      "id": "frequency",
      "type": "snippetListing",
      "title": "frequency",
      "attributes": {
        "text": "Calculates the frequency of an element in an array.\n\nUse `count()` with an appropriate predicate function to count the number of elements in `arr` that are equal to `el`.\n\n",
        "tags": [
          "array",
          "beginner"
        ]
      },
      "meta": {
        "hash": "ab1eefe2f2a94a74de09d79706a45cb75f362b474a3d860f5cbc07c9e4c3c8d2"
      }
    },
    {
      "id": "geometric_mean",
      "type": "snippetListing",
      "title": "geometric_mean",
      "attributes": {
        "text": "The snippet calculates the geometric mean of two or more numbers.\n\nUse `prod()` to get the product of the `args`, then take its n-th root where `n` is the number of arguments passed, calculated using `length()`.\n\n",
        "tags": [
          "math",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "95c94c17582ff677db77edc64ebe0991215695d029d9b6c1184084aca69478e5"
      }
    },
    {
      "id": "harmonic_mean",
      "type": "snippetListing",
      "title": "harmonic_mean",
      "attributes": {
        "text": "The snippet calculates the harmonic mean of two or more numbers.\n\nUse `inv.()` to get the inverse of each argument, add them using `sum()`, then divide the sum by the number of arguments passed, calculated using `length()`.\nFinally use `inv()` to invert the result again and get the harmonic mean.\n\n",
        "tags": [
          "math",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "0ba1d0051f69c8d886dd674ebaa8d5fa389f02e60dfc41461df7da03f75b3fbf"
      }
    },
    {
      "id": "has_duplicates",
      "type": "snippetListing",
      "title": "has_duplicates",
      "attributes": {
        "text": "Checks if an array has duplicate values.\n\nUse `Set(arr)` to create list of  distinct values, then compare its `length()` to the one of the original array.\n\n",
        "tags": [
          "array",
          "beginner"
        ]
      },
      "meta": {
        "hash": "1fc5d102ca5e83a88bf751dd7cd6c3f9c87af6fc2bccca41d2b6120bd43ecc9c"
      }
    },
    {
      "id": "head",
      "type": "snippetListing",
      "title": "head",
      "attributes": {
        "text": "Returns the head of an array.\n\nUse `arr[0]` to return the first element of the passed array.\n\n",
        "tags": [
          "array",
          "beginner"
        ]
      },
      "meta": {
        "hash": "f16a5120646d7f291ed71b7f456d644f6a52f8c80b1045a55eb21c601e42cdfc"
      }
    },
    {
      "id": "intersection_by",
      "type": "snippetListing",
      "title": "intersection_by",
      "attributes": {
        "text": "Finds the intersection of two arrays `a` and `b` after applying a function, `func`, to every element in the two arrays.\n\nUse `func.()` on both arrays to get the function-processed array.\nUse `intersect()` on the returned function-processed arrays.\n\n",
        "tags": [
          "array",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "8b6bf0331b8aebe98340cce4a8b1b3a02d84912d4eb4e6947d59572217ca114e"
      }
    },
    {
      "id": "is_anagram",
      "type": "snippetListing",
      "title": "is_anagram",
      "attributes": {
        "text": "Checks if a string is an anagram of another string.\n\nUse `lowercase()`, `collect()`, `sort()` and `join()` to convert each string to its sorted, lowercase version.\nCompare the results and return `true` if they are equal, `false` otherwise.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "190ef4d27ca94976b14124cf6896705a54df6d7c7127983a534a804a532576d5"
      }
    },
    {
      "id": "is_even",
      "type": "snippetListing",
      "title": "is_even",
      "attributes": {
        "text": "Returns `true` if the given number is even, `false` otherwise.\n\nChecks whether a number is odd or even using the modulo (`%`) operator. \nReturns `true` if the number is even, `false` if the number is odd.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "2427b0a572b82090e6cdd58681872812c393a102b0404642652d0e4b5ced1793"
      }
    },
    {
      "id": "is_odd",
      "type": "snippetListing",
      "title": "is_odd",
      "attributes": {
        "text": "Returns `true` if the given number is odd, `false` otherwise.\n\nChecks whether a number is odd or even using the modulo (`%`) operator. \nReturns `true` if the number is odd, `false` if the number is even.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "179dc868fc253b7a375cd384b47d42d66b6299880a549d214381379c7f9104b3"
      }
    },
    {
      "id": "longest",
      "type": "snippetListing",
      "title": "longest",
      "attributes": {
        "text": "Returns the longest element in args.\n\nUse `length.()` to get the length of each element in `args`, get maximum length using `maximum()`.\nUse `findfirst()` to get the longest item's index and return it from `args`.\n\n",
        "tags": [
          "array",
          "string",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "94694296a210caf34c09ec3776115a1ddb5ea02441747ee02dff14ec37fc9e76"
      }
    },
    {
      "id": "luhn",
      "type": "snippetListing",
      "title": "luhn",
      "attributes": {
        "text": "Implementation of the [Luhn Algorithm](https://en.wikipedia.org/wiki/Luhn_algorithm) used to validate a variety of identification numbers, such as credit card numbers, IMEI numbers, National Provider Identifier numbers, etc.\n\nDefine a `digit_sum()` method to get the sum of the digits of a number, using `sum()` and `digits()`.\nConvert the given number to a string, store the check digit, `chk`, using `string(num[end])`.\nUse slicing, `parse()` and `digit_sum()` on each digit to implement the Luhn Algorithm and produce `parta` and `partb`.\nFinally, return `true` if the sum of `parta`, `partb` and `chk` is divisible by `10`, `false` otherwise. \n\n",
        "tags": [
          "math",
          "utility",
          "advanced"
        ]
      },
      "meta": {
        "hash": "795cfef0e137ecdb7e3f91c6b105627b3b78d07d9aed8b772c5cd082f2a7a445"
      }
    },
    {
      "id": "palindrome",
      "type": "snippetListing",
      "title": "palindrome",
      "attributes": {
        "text": "Returns `true` if the given string is a palindrome, `false` otherwise.\n\nUse `reverse()` to reverse the string, `lowercase()` to convert both the original and the reverse to lowercase.\nReturn the result of comparing the two strings.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "b92b246a0e5ee8d500a1f85da41a9dd6c59c721b45fb33c4b7d7923348808811"
      }
    },
    {
      "id": "pretty_bytes",
      "type": "snippetListing",
      "title": "pretty_bytes",
      "attributes": {
        "text": "Converts a number in bytes to a human-readable string.\n\nUse an array of units to be accessed based on the exponent. \nUse `round()` to truncate the number to a certain number of digits. \nReturn the prettified string by building it up, taking into account the supplied options and whether it is negative or not. \nOmit the second keyword argument, `precision`, to use a default precision of `3` digits. \nOmit the third keyword argument, `add_space`, to add space between the number and unit by default.\n\n",
        "tags": [
          "utility",
          "string",
          "math",
          "advanced"
        ]
      },
      "meta": {
        "hash": "f545b0cd88e4a6cc4d1535d73a319b28f76bc0f7959afcfd7012fbb2c05c7cfc"
      }
    },
    {
      "id": "pull_at_index",
      "type": "snippetListing",
      "title": "pull_at_index",
      "attributes": {
        "text": "Mutates the original array to filter out the values at the specified indexes. \nReturns the removed elements.\n\nUse `filter!()` to pull out the values that are not needed. \nUse `push!()` to re-populate a new array with only the values pulled.\n\n",
        "tags": [
          "array",
          "advanced"
        ]
      },
      "meta": {
        "hash": "b3bc7aa25353af0268d242ab55df57d4e30b187a2aa7066d285c9ca2a31b7abc"
      }
    },
    {
      "id": "pull_at_value",
      "type": "snippetListing",
      "title": "pull_at_value",
      "attributes": {
        "text": "Mutates the original array to filter out the values specified. \nReturns the removed elements.\n\nUse `filter!()` to pull out the values that are not needed. \nUse `push!()` to re-populate a new array with only the values pulled.\n\n",
        "tags": [
          "array",
          "advanced"
        ]
      },
      "meta": {
        "hash": "dc3394f91394e23e8b06d0a222d9de772b8fafa1a9df9cb804fae21c293deea7"
      }
    },
    {
      "id": "root_mean_square",
      "type": "snippetListing",
      "title": "root_mean_square",
      "attributes": {
        "text": "Calculates the root mean square of the given arguments.\n\nUse `abs2.()` and `length()` to get the mean of the square of `args`. \nUse `sqrt()` to get the square root of this value.\n\n",
        "tags": [
          "math",
          "array",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "249503ca370689881821ee6d024052fae6f693abc326bad2bfcb376e4c07d649"
      }
    },
    {
      "id": "shuffle",
      "type": "snippetListing",
      "title": "shuffle",
      "attributes": {
        "text": "Randomizes the order of the values of an array, returning a new array.\n\nUse `copy()` to create a new array from `arr`.\nUse the [Fisher-Yates algorithm](https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#Fisher_and_Yates'_original_method) to reorder the elements of the array.\n\n",
        "tags": [
          "array",
          "random",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "b49dd1c9d6032005d423d889344d5eb8b634c7ec7ffc5893a75a8994d1caf79e"
      }
    }
  ],
  "meta": {
    "specification": "http://jsonapi.org/format/",
    "type": "snippetListingArray",
    "language": {
      "short": "jl",
      "long": "Julia"
    }
  }
}